Index: app/src/main/java/com/example/binuspostscheduler/activities/UpdateScheduleActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binuspostscheduler.activities;\r\n\r\nimport androidx.activity.OnBackPressedCallback;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.constraintlayout.widget.ConstraintLayout;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.fragment.app.FragmentTransaction;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.app.Activity;\r\nimport android.app.DatePickerDialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.graphics.Color;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.Button;\r\nimport android.widget.DatePicker;\r\nimport android.widget.EditText;\r\nimport android.widget.FrameLayout;\r\nimport android.widget.ImageView;\r\nimport android.widget.Spinner;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport com.example.binuspostscheduler.Adapter.AddMediaAdapter;\r\nimport com.example.binuspostscheduler.Adapter.SelectAccountAdapter;\r\nimport com.example.binuspostscheduler.R;\r\nimport com.example.binuspostscheduler.animations.LoadingAnimation;\r\nimport com.example.binuspostscheduler.authentications.SingletonFirebaseTool;\r\nimport com.example.binuspostscheduler.authentications.UserSession;\r\nimport com.example.binuspostscheduler.fragments.SelectAccountFragment;\r\nimport com.example.binuspostscheduler.helpers.RealPathHelper;\r\nimport com.example.binuspostscheduler.interfaces.AddMediaInterface;\r\nimport com.example.binuspostscheduler.models.Account;\r\nimport com.example.binuspostscheduler.models.PostedSchedule;\r\nimport com.example.binuspostscheduler.ui.home.HomeFragment;\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.firebase.storage.StorageReference;\r\nimport com.google.firebase.storage.UploadTask;\r\n\r\nimport org.apache.commons.lang3.RandomStringUtils;\r\n\r\nimport java.io.File;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\n\r\npublic class UpdateScheduleActivity extends AppCompatActivity implements AddMediaInterface {\r\n\r\n    private TextView detailDate;\r\n    private RecyclerView rvImages;\r\n    private Button changeDate, updateButton, chooseImage, uploadImage, selectAccount;\r\n    private EditText detailDescription, detailHashTags, timeHour;\r\n    private ImageView edit_post_back_arrow;\r\n    DatePickerDialog.OnDateSetListener setListener;\r\n    private Spinner dropdownType;\r\n    private ArrayList<Account> previousAccounts;\r\n    private SelectAccountFragment selectAccountFragment;\r\n    private FrameLayout frameLayout;\r\n    private String role = \"Once\";\r\n    private Context ctx;\r\n    ArrayList<String> imagePaths = new ArrayList<>();\r\n    private ConstraintLayout updateScheduleLayout;\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_update_schedule);\r\n\r\n        initializeItems();\r\n\r\n        Intent intent = getIntent();\r\n        final PostedSchedule obj = new PostedSchedule();\r\n        obj.setId(intent.getStringExtra(\"id\"));\r\n        obj.setDescription(intent.getStringExtra(\"description\"));\r\n        obj.setVideo(intent.getStringExtra(\"video\"));\r\n        obj.setImage(intent.getStringArrayListExtra(\"image\"));\r\n        obj.setTime(intent.getStringExtra(\"time\"));\r\n        obj.setHashtags(intent.getStringArrayListExtra(\"hashtags\"));\r\n        obj.setSelected_id(intent.getParcelableArrayListExtra(\"selected_id\"));\r\n        obj.setType(intent.getStringExtra(\"type\"));\r\n//        Toast.makeText(this, intent.getStringExtra(\"type\"), Toast.LENGTH_SHORT).show();\r\n        fetchData(obj);\r\n\r\n        buttonListener();\r\n\r\n    }\r\n\r\n    private void buttonListener() {\r\n\r\n        Calendar calendar = Calendar.getInstance();\r\n        final int year = calendar.get(Calendar.YEAR);\r\n        final int month = calendar.get(Calendar.MONTH);\r\n        final int day = calendar.get(Calendar.DAY_OF_MONTH);\r\n        final int hour = calendar.get(Calendar.HOUR);\r\n        final int minute = calendar.get(Calendar.MINUTE);\r\n\r\n\r\n\r\n//        DatePickerDialog datePickerDialog = DatePickerDialog(this, DatePickerDialog.OnDateSetListener { datePicker, i, i2, i3 ->\r\n//                run {\r\n//            year = i\r\n//            month = i2 + 1\r\n//            day = i3\r\n//\r\n//            val timePickerDialog = TimePickerDialog(view.context, TimePickerDialog.OnTimeSetListener { timePicker, i, i2 ->\r\n//                    run {\r\n//                hour = i\r\n//                minute = i2\r\n//                Log.d(\"Test\", \" Year = \" + year + \" , month = \" + month + \", day =\" + day + \" , hour \" + hour + \" , minute = \" + minute)\r\n//            }\r\n//            }, hour, minute, true)\r\n//            timePickerDialog.show()\r\n//        }\r\n//        }, year, month, day)\r\n\r\n\r\n        edit_post_back_arrow.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                finish();\r\n            }\r\n        });\r\n\r\n        changeDate.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                DatePickerDialog datePickerDialog = new DatePickerDialog(\r\n                        UpdateScheduleActivity.this, android.R.style.Theme_Holo_Light_Dialog_MinWidth, setListener, year, month, day);\r\n                datePickerDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\r\n                datePickerDialog.show();\r\n            }\r\n        });\r\n\r\n        updateButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                if(mediaPaths.isEmpty()){\r\n                    Toast.makeText(UpdateScheduleActivity.this, \"Minimum of 1 image is required\", Toast.LENGTH_SHORT).show();\r\n                    return;\r\n                }\r\n                role = dropdownType.getItemAtPosition((int) dropdownType.getSelectedItemId()).toString();\r\n\r\n                if (mediaPaths.isEmpty()) {\r\n                    updateData();\r\n                } else {\r\n                    for(Uri media : mediaPaths){\r\n\r\n                        String randomString = RandomStringUtils.randomAlphanumeric(24);\r\n                        StorageReference ref = SingletonFirebaseTool.getInstance().getMyStorageReference().getReference().child(\"images/\" + randomString);\r\n                        uploadImage(ref, media);\r\n                    }\r\n                }\r\n\r\n                LoadingAnimation.startLoading(UpdateScheduleActivity.this);\r\n                startActivity(new Intent(UpdateScheduleActivity.this, MainActivity.class));\r\n\r\n//                SingletonFirebaseTool.getInstance().getMyFireStoreReference().collection(\"users\" )\r\n//                        .document(UserSession.getCurrentUser().getId())\r\n//                        .collection(\"schedule\")\r\n//                        .document(getIntent().getStringExtra(\"id\")).set(updatedSchedule)\r\n//                        .addOnSuccessListener(new OnSuccessListener<Void>() {\r\n//                            @Override\r\n//                            public void onSuccess(Void aVoid) {\r\n//                                Toast.makeText(UpdateScheduleActivity.this, getResources().getString(R.string.meeting_updated), Toast.LENGTH_SHORT).show();\r\n//                                finish();\r\n//                            }\r\n//                        });;\r\n            }\r\n        });\r\n\r\n        setListener = new DatePickerDialog.OnDateSetListener() {\r\n            @Override\r\n            public void onDateSet(DatePicker view, int year, int month, int dayOfMonth) {\r\n                month += 1;\r\n                // ini day of month\r\n                String date = dayOfMonth + \"-\" + month + \"-\" + year;\r\n                Date pDate = null;\r\n                SimpleDateFormat dFormat = new SimpleDateFormat(\"dd-mm-yyyy\");\r\n                try {\r\n                    pDate = new SimpleDateFormat(\"dd-mm-yyyy\").parse(date);\r\n                } catch (ParseException e) {\r\n                    e.printStackTrace();\r\n                }\r\n                detailDate.setText(dFormat.format(pDate));\r\n            }\r\n        };\r\n\r\n        chooseImage.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Intent i = new Intent(Intent.ACTION_GET_CONTENT);\r\n                i.setType(\"*/*\");\r\n                String[] mimetypes = new String[]{\"image/*\", \"video/*\"};\r\n                i.putExtra(Intent.EXTRA_MIME_TYPES, mimetypes);\r\n                startActivityForResult(Intent.createChooser(i, \"Choose Image\"), 999);\r\n            }\r\n        });\r\n        selectAccount.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                updateButton.setVisibility(View.GONE);\r\n                updateScheduleLayout.setVisibility(View.GONE);\r\n                findViewById(R.id.scrollView4).setVisibility(View.GONE);\r\n//                findViewById(R.id.select_account_layout).bringToFront();\r\n                FragmentManager fm = getSupportFragmentManager();\r\n                FragmentTransaction transaction = fm.beginTransaction();\r\n                transaction.add(R.id.select_account_layout,selectAccountFragment).addToBackStack(null).commit();\r\n\r\n            }\r\n        });\r\n\r\n//        selectAccountFragment.;\r\n//        uploadImage.setOnClickListener(new View.OnClickListener() {\r\n//            @Override\r\n//            public void onClick(View v) {\r\n//\r\n////                ArrayList<String> imagePaths = new ArrayList<>();\r\n//\r\n//\r\n////                imagePaths.clear();\r\n////\r\n////                for(Uri media : mediaPaths){\r\n////\r\n////                    String randomString = RandomStringUtils.randomAlphanumeric(24);\r\n////                    StorageReference ref = SingletonFirebaseTool.getInstance().getMyStorageReference().getReference().child(\"images/\" + randomString);\r\n//////                    StorageTask downloadUrl = uploadImage(ref, media);\r\n//////                    imagePaths.add(downloadUrl)\r\n//////                    await(uploadImage(ref, media));\r\n////                    uploadImage(ref, media);\r\n////                }\r\n////\r\n////                LoadingAnimation.startLoading(UpdateScheduleActivity.this);\r\n////\r\n//////                while (true) if (imagePaths.size() == mediaPaths.size()) break;\r\n////\r\n////                Log.d(\"ERRR\", \" \" + imagePaths.size());\r\n////\r\n////            }\r\n//\r\n//\r\n//        });\r\n\r\n    }\r\n\r\n    private void updateData() {\r\n        PostedSchedule updatedSchedule = new PostedSchedule();\r\n        updatedSchedule.setId(getIntent().getStringExtra(\"id\"));\r\n        updatedSchedule.setDescription(detailDescription.getText().toString());\r\n        updatedSchedule.setVideo(getIntent().getStringExtra(\"video\"));\r\n        updatedSchedule.setImage(imagePaths);\r\n        updatedSchedule.setUser_id(UserSession.getCurrentUser().getId());\r\n        updatedSchedule.setTime(detailDate.getText().toString() + \" \" + timeHour.getText().toString() + \":00\");\r\n        updatedSchedule.setType(role);\r\n        ArrayList<Account> new_acc = getIntent().getParcelableArrayListExtra(\"updated_account\");\r\n        if(new_acc !=null){\r\n            updatedSchedule.setSelected_id(new_acc);\r\n        }\r\n        else{\r\n            updatedSchedule.setSelected_id(getIntent().getParcelableArrayListExtra(\"selected_id\"));\r\n        }\r\n\r\n        String allTags = detailHashTags.getText().toString();\r\n        ArrayList<String> arrStringTags = new ArrayList<>();\r\n        String[] arrTags = allTags.split(\" \");\r\n        for (String tag : arrTags) {\r\n            arrStringTags.add(tag);\r\n        }\r\n        updatedSchedule.setHashtags(arrStringTags);\r\n//        updatedSchedule.setSelected_id(getIntent().getParcelableArrayListExtra(\"selected_id\"));\r\n\r\n        SingletonFirebaseTool.getInstance().getMyFireStoreReference().collection(\"schedules\")\r\n                .document(updatedSchedule.getId()).set(updatedSchedule)\r\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\r\n                    @Override\r\n                    public void onSuccess(Void aVoid) {\r\n                        Toast.makeText(UpdateScheduleActivity.this, getResources().getString(R.string.meeting_updated), Toast.LENGTH_SHORT).show();\r\n                        finish();\r\n                    }\r\n                });;\r\n    }\r\n\r\n    public synchronized void uploadImage(StorageReference ref, Uri media) {\r\n\r\n        ref.putFile(media).addOnCompleteListener(new OnCompleteListener<UploadTask.TaskSnapshot>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<UploadTask.TaskSnapshot> task) {\r\n                if (task.isSuccessful()) {\r\n                    ref.getDownloadUrl().addOnSuccessListener(new OnSuccessListener<Uri>() {\r\n                        @Override\r\n                        public void onSuccess(Uri uri) {\r\n                            Log.d(\"DDD\", uri.toString());\r\n                            imagePaths.add(uri.toString());\r\n                            if (imagePaths.size() == mediaPaths.size()) {\r\n                                updateData();\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    ArrayList<Uri> mediaPaths = new ArrayList<>();\r\n    ArrayList<File> medias = new ArrayList<>();\r\n\r\n\r\n    @Override\r\n    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n        if(requestCode == 999 && resultCode == Activity.RESULT_OK && data != null){\r\n//            img = File(data.data!!.toString())\r\n            RealPathHelper objRPH = RealPathHelper.INSTANCE;\r\n            String path = objRPH.getRealPath(this, data.getData());\r\n//            Log.d(\"Data\",\"= \"+data.data)\r\n//            Log.d(\"Path\",\"= \"+)\r\n//            Log.d(\"PATH\",path!!)\r\n            File file = new File(path);\r\n            if (!file.isFile()){\r\n//                Log.d(\"ISFILE\",\"NOPE \"+file.absolutePath)\r\n                Toast.makeText(this, \"Its not a file\", Toast.LENGTH_SHORT).show();\r\n            }\r\n            else{\r\n                mediaPaths.add(data.getData());\r\n                String fileExt = path.substring(path.lastIndexOf(\".\")+1);\r\n\r\n                medias.add(file);\r\n                AddMediaAdapter adapter = new AddMediaAdapter(this, medias, this, false);\r\n\r\n                rvImages.setLayoutManager(new LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false));\r\n\r\n                rvImages.setAdapter(adapter);\r\n\r\n                adapter.notifyDataSetChanged();\r\n\r\n                checkMediaStatus();\r\n            }\r\n        }\r\n    }\r\n\r\n    private void checkMediaStatus(){\r\n        if (medias.isEmpty()) rvImages.setVisibility(View.GONE);\r\n        else rvImages.setVisibility(View.VISIBLE);\r\n\r\n        chooseImage.setEnabled(medias.size() != 4);\r\n    }\r\n\r\n    private void fetchData(PostedSchedule obj) {\r\n        SimpleDateFormat dFormat = new SimpleDateFormat(\"dd-mm-yyyy\");\r\n        Date pDate = null;\r\n        try {\r\n            pDate = new SimpleDateFormat(\"dd-mm-yyyy\").parse(obj.getTime());\r\n        } catch (ParseException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        String allTags = \"\";\r\n\r\n        for(String tag : obj.getHashtags()){\r\n            if(allTags.equals(\"\")){\r\n                allTags += tag;\r\n            }else{\r\n                allTags += \" \" + tag;\r\n            }\r\n        }\r\n\r\n//        detailDate.setText(dFormat.format(pDate));\r\n        detailDescription.setText(obj.getDescription());\r\n//        image.setText(obj.getImage());\r\n//        video.setText(obj.getVideo());\r\n\r\n//        String compareValue = obj.getType();\r\n//        ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.role, android.R.layout.simple_spinner_item);\r\n//        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n//        dropdownType.setAdapter(adapter);\r\n//        if (compareValue != null) {\r\n//            int spinnerPosition = adapter.getPosition(compareValue);\r\n//            dropdownType.setSelection(spinnerPosition);\r\n//        }\r\n\r\n//        Toast.makeText(this, obj.getType(), Toast.LENGTH_SHORT).show();\r\n        int pos = -1;\r\n\r\n        if (obj.getType().equals(\"Once\")) {\r\n            pos = 0;\r\n        } else if (obj.getType().equals(\"Daily\")) {\r\n            pos = 1;\r\n        } else if (obj.getType().equals(\"Weekly\")) {\r\n            pos = 2;\r\n        } else if (obj.getType().equals(\"Monthly\")) {\r\n            pos = 3;\r\n        }\r\n        dropdownType.setSelection(pos);\r\n\r\n        detailHashTags.setText(allTags);\r\n        String[] arrSplit = obj.getTime().split(\" \");\r\n        String[] timeSplit = arrSplit[1].split(\":\");\r\n        detailDate.setText(arrSplit[0]);\r\n        timeHour.setText(timeSplit[0] + \":\" + timeSplit[1]);\r\n        selectAccountFragment.setPreviousAccounts(obj.getSelected_id());\r\n    }\r\n\r\n    private void initializeItems() {\r\n        this.detailDate = findViewById(R.id.detailDate);\r\n        this.changeDate = findViewById(R.id.changeDate);\r\n        this.detailDescription = findViewById(R.id.detailDescription);\r\n        this.detailHashTags = findViewById(R.id.detailHashtags);\r\n        this.changeDate = findViewById(R.id.changeDate);\r\n        this.updateButton = findViewById(R.id.detailUpdateBtn);\r\n        this.timeHour = findViewById(R.id.timeHour);\r\n//        this.uploadImage = findViewById(R.id.uploadImage);\r\n        this.chooseImage = findViewById(R.id.chooseImage);\r\n        this.rvImages = findViewById(R.id.recyclerViewImages);\r\n        this.edit_post_back_arrow = findViewById(R.id.edit_post_back_arrow);\r\n        this.selectAccount = findViewById(R.id.select_account_btn);\r\n        this.dropdownType = findViewById(R.id.dropdownType);\r\n        this.dropdownType.setAdapter(new ArrayAdapter<>(UpdateScheduleActivity.this, android.R.layout.simple_spinner_dropdown_item, getResources().getStringArray(R.array.role)));\r\n        this.frameLayout = findViewById(R.id.select_account_layout);\r\n        this.selectAccountFragment = new SelectAccountFragment();\r\n\r\n        this.ctx = this;\r\n        this.updateScheduleLayout = findViewById(R.id.update_schedule_layout);\r\n    }\r\n\r\n    @Override\r\n    public void removeMedia(int index) {\r\n        medias.remove(index);\r\n        mediaPaths.remove(index);\r\n        checkMediaStatus();\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        super.onBackPressed();\r\n        this.updateScheduleLayout.setVisibility(View.VISIBLE);\r\n        findViewById(R.id.scrollView4).setVisibility(View.VISIBLE);\r\n        updateButton.setVisibility(View.VISIBLE);\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/binuspostscheduler/activities/UpdateScheduleActivity.java b/app/src/main/java/com/example/binuspostscheduler/activities/UpdateScheduleActivity.java
--- a/app/src/main/java/com/example/binuspostscheduler/activities/UpdateScheduleActivity.java	(revision 9f18e886a45ffc7db4b339c4cf5048b76deedbd0)
+++ b/app/src/main/java/com/example/binuspostscheduler/activities/UpdateScheduleActivity.java	(date 1643170812989)
@@ -45,6 +45,9 @@
 import com.google.android.gms.tasks.OnCompleteListener;
 import com.google.android.gms.tasks.OnSuccessListener;
 import com.google.android.gms.tasks.Task;
+import com.google.firebase.firestore.DocumentSnapshot;
+import com.google.firebase.firestore.FirebaseFirestore;
+import com.google.firebase.firestore.QueryDocumentSnapshot;
 import com.google.firebase.storage.StorageReference;
 import com.google.firebase.storage.UploadTask;
 
@@ -56,6 +59,7 @@
 import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.Date;
+import java.util.Objects;
 
 public class UpdateScheduleActivity extends AppCompatActivity implements AddMediaInterface {
 
@@ -71,6 +75,7 @@
     private FrameLayout frameLayout;
     private String role = "Once";
     private Context ctx;
+    PostedSchedule obj = new PostedSchedule();
     ArrayList<String> imagePaths = new ArrayList<>();
     private ConstraintLayout updateScheduleLayout;
     @Override
@@ -81,7 +86,6 @@
         initializeItems();
 
         Intent intent = getIntent();
-        final PostedSchedule obj = new PostedSchedule();
         obj.setId(intent.getStringExtra("id"));
         obj.setDescription(intent.getStringExtra("description"));
         obj.setVideo(intent.getStringExtra("video"));
@@ -91,10 +95,23 @@
         obj.setSelected_id(intent.getParcelableArrayListExtra("selected_id"));
         obj.setType(intent.getStringExtra("type"));
 //        Toast.makeText(this, intent.getStringExtra("type"), Toast.LENGTH_SHORT).show();
-        fetchData(obj);
-
-        buttonListener();
-
+
+
+        buttonListener();
+
+    }
+
+    private void getPostData(String id){
+        FirebaseFirestore.getInstance().collection("schedules").document(id).get().addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {
+            @Override
+            public void onComplete(@NonNull Task<DocumentSnapshot> task) {
+                if(task.isSuccessful()){
+                    PostedSchedule postedSchedule = task.getResult().toObject(PostedSchedule.class);
+                    obj = postedSchedule;
+                    fetchData(obj);
+                }
+            }
+        });
     }
 
     private void buttonListener() {
Index: app/src/main/java/com/example/binuspostscheduler/notification/NotificationBroadcast.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binuspostscheduler.notification;\r\n\r\nimport android.app.PendingIntent;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.drawable.Drawable;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.core.app.NotificationCompat;\r\nimport androidx.core.app.NotificationManagerCompat;\r\n\r\nimport com.example.binuspostscheduler.R;\r\nimport com.example.binuspostscheduler.activities.ScheduleDetailActivity;\r\nimport com.example.binuspostscheduler.authentications.SingletonFirebaseTool;\r\nimport com.example.binuspostscheduler.models.Account;\r\nimport com.example.binuspostscheduler.models.PostedSchedule;\r\nimport com.facebook.AccessToken;\r\nimport com.facebook.GraphRequest;\r\nimport com.facebook.GraphResponse;\r\nimport com.facebook.HttpMethod;\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.firestore.DocumentSnapshot;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\nimport com.google.firebase.firestore.QueryDocumentSnapshot;\r\nimport com.google.firebase.firestore.QuerySnapshot;\r\nimport com.squareup.picasso.Picasso;\r\nimport com.squareup.picasso.Target;\r\n\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.io.BufferedOutputStream;\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.OutputStream;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.Objects;\r\n\r\nimport twitter4j.Status;\r\nimport twitter4j.StatusUpdate;\r\nimport twitter4j.Twitter;\r\nimport twitter4j.TwitterException;\r\nimport twitter4j.TwitterFactory;\r\nimport twitter4j.UploadedMedia;\r\nimport twitter4j.conf.ConfigurationBuilder;\r\n\r\npublic class NotificationBroadcast extends BroadcastReceiver {\r\n    final ArrayList<PostedSchedule> postedListRaw = new ArrayList<>();\r\n    final ArrayList<PostedSchedule> postedList = new ArrayList<>();\r\n    final ArrayList<String> accT_list = new ArrayList<>();\r\n    String uid_API = null;\r\n    String user_id = null;\r\n    FirebaseFirestore db = FirebaseFirestore.getInstance();\r\n    String instagramBId = \"\";\r\n    Context ctx;\r\n    @Override\r\n    public void onReceive(Context context, Intent intent) {\r\n        user_id = FirebaseAuth.getInstance().getCurrentUser().getUid();\r\n        this.ctx = context;\r\n        checkSchedule(context);\r\n        Log.d(\"Notiflewat\", \"NOTIFICATION 1 menit\");\r\n    }\r\n\r\n    void checkSchedule(Context context){\r\n        SingletonFirebaseTool.getInstance().getMyFireStoreReference().collection(\"schedules\")\r\n                .get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<QuerySnapshot> task) {\r\n                if (task.isSuccessful()) {\r\n                    postedList.clear();\r\n                    postedListRaw.clear();\r\n                    for (QueryDocumentSnapshot documentSnapshot : Objects.requireNonNull(task.getResult())) {\r\n                        PostedSchedule postedSchedule = documentSnapshot.toObject(PostedSchedule.class);\r\n                        postedListRaw.add(postedSchedule);\r\n                    }\r\n\r\n\r\n\r\n                    for(PostedSchedule post : postedListRaw){\r\n                        Log.d(\"Notiflewat\", user_id + \" = \" + post.getUser_id());\r\n                        if(post.getUser_id().equalsIgnoreCase(user_id)){\r\n                            postedList.add(post);\r\n                        }\r\n                    }\r\n\r\n                    SimpleDateFormat dFormat = new SimpleDateFormat(\"dd-MM-yyyy HH:mm\");\r\n                    Date date = new Date();\r\n                    String today = dFormat.format(date);\r\n                    String postDate;\r\n\r\n                    for(PostedSchedule post : postedList){\r\n                        Date pDate = null;\r\n                        try {\r\n                            pDate = new SimpleDateFormat(\"dd-MM-yyyy HH:mm:ss\").parse(post.getTime());\r\n                        } catch (ParseException e) {\r\n                            e.printStackTrace();\r\n                        }\r\n\r\n                        pDate.setTime(pDate.getTime() - (1000 *60));\r\n                        postDate = dFormat.format(pDate);\r\n                        if(today.equalsIgnoreCase(postDate)){\r\n                            Log.d(\"Notiflewat\", post.getSelected_id().toString());\r\n                            sendNotif(context, post);\r\n\r\n                            if (post.getType().equalsIgnoreCase(\"daily\")){\r\n                                setDaily(post, context);\r\n                            }else if(post.getType().equalsIgnoreCase(\"weekly\")){\r\n                                setWeekly(post, context);\r\n                            }else if(post.getType().equalsIgnoreCase(\"monthly\")){\r\n                                setMonthly(post, context);\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    void setDaily(PostedSchedule post , Context context){\r\n\r\n        SimpleDateFormat dFormat = new SimpleDateFormat(\"dd-MM-yyyy HH:mm:ss\");\r\n\r\n        long oneDay = 1000 * 60 * 60 * 24;\r\n\r\n        Date newDate = null;\r\n        try {\r\n            newDate = new SimpleDateFormat(\"dd-MM-yyyy HH:mm:ss\").parse(post.getTime());\r\n        } catch (ParseException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        newDate.setTime(newDate.getTime() + oneDay);\r\n\r\n        String newestDate = dFormat.format(newDate);\r\n\r\n        post.setTime(newestDate);\r\n\r\n        SingletonFirebaseTool.getInstance().getMyFireStoreReference().collection(\"schedules\")\r\n                .document(post.getId()).set(post)\r\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\r\n                    @Override\r\n                    public void onSuccess(Void aVoid) {\r\n                    }\r\n                });;\r\n\r\n    }\r\n\r\n    void setWeekly(PostedSchedule post, Context context){\r\n        SimpleDateFormat dFormat = new SimpleDateFormat(\"dd-MM-yyyy HH:mm:ss\");\r\n        long sevenDay = 1000 * 60 * 60 * 24 * 7;\r\n\r\n        Date newDate = null;\r\n        try {\r\n            newDate = new SimpleDateFormat(\"dd-MM-yyyy HH:mm:ss\").parse(post.getTime());\r\n        } catch (ParseException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        newDate.setTime(newDate.getTime() + sevenDay);\r\n\r\n        String newestDate = dFormat.format(newDate);\r\n        post.setTime(newestDate);\r\n        SingletonFirebaseTool.getInstance().getMyFireStoreReference().collection(\"schedules\")\r\n                .document(post.getId()).set(post)\r\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\r\n                    @Override\r\n                    public void onSuccess(Void aVoid) {\r\n//                        Toast.makeText(context, \"\", Toast.LENGTH_SHORT).show();\r\n                    }\r\n                });;\r\n    }\r\n\r\n    void setMonthly(PostedSchedule post, Context context){\r\n        String splitDateTime[] = post.getTime().split(\" \");\r\n        String splitDate[] = splitDateTime[0].split(\"-\");\r\n\r\n        if(splitDate[1].equalsIgnoreCase(\"12\")){\r\n            splitDate[1] = \"1\";\r\n            int year = Integer.parseInt(splitDate[2]) + 1;\r\n            splitDate[2] = String.valueOf(year);\r\n        }else{\r\n            int month = Integer.parseInt(splitDate[1]) + 1;\r\n            splitDate[1] = String.valueOf(month);\r\n        }\r\n\r\n        String newDate = splitDate[0] + \"-\"+ splitDate[1] + \"-\" + splitDate[2] + \" \" + splitDateTime[1];\r\n        post.setTime(newDate);\r\n        SingletonFirebaseTool.getInstance().getMyFireStoreReference().collection(\"schedules\")\r\n                .document(post.getId()).set(post)\r\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\r\n                    @Override\r\n                    public void onSuccess(Void aVoid) {\r\n\r\n                    }\r\n                });;\r\n\r\n    }\r\n\r\n\r\n    void sendNotif(Context context, PostedSchedule post){\r\n        // auto post instagram and Facebook\r\n        setApiDatabase(post);\r\n\r\n        // auto post to twitter\r\n        if(isTwitterExists(post))\r\n        {\r\n            db.collection(\"users\").document(post.getUser_id()).collection(\"accounts\").document(\"twitter\").get().addOnSuccessListener(new OnSuccessListener<DocumentSnapshot>() {\r\n                @Override\r\n                public void onSuccess(DocumentSnapshot documentSnapshot) {\r\n                    Account acc = documentSnapshot.toObject(Account.class);\r\n                    postTwitter(acc,post);\r\n                }\r\n            });\r\n        }\r\n\r\n        // send notif\r\n        Intent myIntent = new Intent(context, ScheduleDetailActivity.class);\r\n        myIntent.putExtra(\"id\", post.getId());\r\n        myIntent.putExtra(\"description\", post.getDescription());\r\n        myIntent.putExtra(\"image\", post.getImage());\r\n        myIntent.putExtra(\"hashtags\", post.getHashtags());\r\n        myIntent.putExtra(\"video\", post.getVideo());\r\n        myIntent.putExtra(\"time\", post.getTime());\r\n        myIntent.putExtra(\"selected_id\", post.getSelected_id());\r\n        myIntent.putExtra(\"type\", post.getType());\r\n        myIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\r\n\r\n\r\n        PendingIntent pendingIntent = PendingIntent.getBroadcast(context, 0, myIntent, 0);\r\n\r\n        NotificationCompat.Builder builder = new NotificationCompat.Builder(context, \"notifChannel\").setSmallIcon(R.drawable.messenger_bubble_large_blue)\r\n                .setContentTitle(\"Autopost\")\r\n                .setContentText(\"Your content has been published\")\r\n                .setContentIntent(pendingIntent)\r\n                .setPriority(NotificationCompat.PRIORITY_MAX);\r\n\r\n        NotificationManagerCompat notifManager = NotificationManagerCompat.from(context);\r\n\r\n        notifManager.notify(200, builder.build());\r\n\r\n\r\n    }\r\n\r\n    private void getDataPublish(PostedSchedule post){\r\n        db.collection(\"users\").document(user_id).collection(\"accounts\")\r\n          .document(\"facebook\").collection(\"pages\").get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<QuerySnapshot> task) {\r\n                if(task.isSuccessful()){\r\n                    for (QueryDocumentSnapshot doc : task.getResult()) {\r\n                        String accT, id, name, uid , status;\r\n                        accT= doc.getString(\"access_token\");\r\n                        id = doc.getString(\"id\");\r\n                        name = doc.getString(\"name\");\r\n                        uid = doc.getString(\"uid\");\r\n                        accT_list.add(accT);\r\n                        uid_API = uid;\r\n\r\n                        //post facebook\r\n                        if(isFacebookPagesExists(post, id)){\r\n                            publishFacebook(post,id, accT);\r\n                        }\r\n                    }\r\n\r\n\r\n                    //post instagram\r\n                    if(isInstagramExists(post)) {\r\n                        db.collection(\"users\").document(user_id).collection(\"accounts\").document(\"instagram\")\r\n                                .get().addOnSuccessListener(new OnSuccessListener<DocumentSnapshot>() {\r\n                            @Override\r\n                            public void onSuccess(DocumentSnapshot documentSnapshot) {\r\n                                instagramBId = documentSnapshot.get(\"id\").toString();\r\n                                publishInstagram(post);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n\r\n    private void publishInstagram(PostedSchedule post) {\r\n        AccessToken accessToken = new AccessToken(accT_list.get(0), \"472685857272246\", uid_API,\r\n                null, null, null,null, null, null, null, null);\r\n\r\n        String desc = post.getDescription() + \"\\n\\n.\\n.\\n.\\n.\\n\";\r\n\r\n        for(String hash : post.getHashtags()){\r\n            desc += hash + \" \";\r\n        }\r\n\r\n        Bundle params = new Bundle();\r\n        params.putString(\"image_url\", post.getImage().get(0));\r\n        params.putString(\"caption\", desc);\r\n\r\n        Bundle paramPost = new Bundle();\r\n\r\n        new GraphRequest(\r\n                accessToken,\r\n                \"/\"+ instagramBId +\"/media\",\r\n                params,\r\n                HttpMethod.POST,\r\n                new GraphRequest.Callback() {\r\n                    public void onCompleted(GraphResponse response) {\r\n                        JSONObject postObj = response.getJSONObject();\r\n                        try {\r\n                            String postId = postObj.getString(\"id\");\r\n                            paramPost.putString(\"creation_id\", postId);\r\n                            new GraphRequest(\r\n                                    accessToken,\r\n                                    \"/\"+ instagramBId +\"/media_publish\",\r\n                                    paramPost,\r\n                                    HttpMethod.POST,\r\n                                    new GraphRequest.Callback() {\r\n                                        public void onCompleted(GraphResponse response) {\r\n\r\n                                        }\r\n                                    }\r\n                            ).executeAsync();\r\n                        } catch (JSONException e) {\r\n                            e.printStackTrace();\r\n                        }\r\n                    }\r\n                }\r\n        ).executeAsync();\r\n\r\n    }\r\n\r\n    private void publishFacebook(PostedSchedule post, String pages_id, String accT){\r\n        AccessToken acc = new AccessToken(accT, \"472685857272246\", uid_API,\r\n                null, null, null,null, null, null, null, null);\r\n\r\n        String desc = post.getDescription() + \"\\n\\n\";\r\n\r\n        for(String hash : post.getHashtags()){\r\n            desc += hash + \" \";\r\n        }\r\n\r\n        Bundle params = new Bundle();\r\n        params.putString(\"message\", desc);\r\n        params.putString(\"url\", post.getImage().get(0));\r\n\r\n\r\n        new GraphRequest(\r\n                acc,\r\n                \"/ \"+ pages_id +\"/photos\",\r\n                params,\r\n                HttpMethod.POST,\r\n                new GraphRequest.Callback() {\r\n                    public void onCompleted(GraphResponse response) {\r\n                        //success\r\n                    }\r\n                }\r\n        ).executeAsync();\r\n    }\r\n\r\n\r\n    private void setApiDatabase(PostedSchedule post){\r\n        GraphRequest graphRequest = GraphRequest.newMeRequest(AccessToken.getCurrentAccessToken(), new GraphRequest.GraphJSONObjectCallback() {\r\n            @Override\r\n            public void onCompleted(JSONObject object, GraphResponse response) {\r\n                if(object != null){\r\n                    try {\r\n                        String name = object.getString(\"name\").toString();\r\n                        String uid = object.getString(\"id\").toString();\r\n\r\n                        Map<String, Object> map = new HashMap<>();\r\n                        map.put(\"uid\", uid);\r\n                        map.put(\"name\", name);\r\n\r\n                        db.collection(\"users\").document(user_id).collection(\"accounts\").document(\"facebook\")\r\n                                .update(map);\r\n\r\n                        int len = object.getJSONObject(\"accounts\").getJSONArray(\"data\").length();\r\n\r\n                        for(int i = 0; i < len; i++) {\r\n                            String a = object.getJSONObject(\"accounts\").getJSONArray(\"data\").getJSONObject(i).getString(\"access_token\");\r\n                            String b = object.getJSONObject(\"accounts\").getJSONArray(\"data\").getJSONObject(i).getString(\"id\");\r\n                            String c = object.getJSONObject(\"accounts\").getJSONArray(\"data\").getJSONObject(i).getString(\"name\");\r\n\r\n                            Map<String, Object> page = new HashMap<>();\r\n                            page.put(\"access_token\", a);\r\n                            page.put(\"id\", b);\r\n                            page.put(\"name\", c);\r\n                            page.put(\"uid\", uid);\r\n\r\n                            db.collection(\"users\").document(user_id).collection(\"accounts\")\r\n                                    .document(\"facebook\").collection(\"pages\").document(b)\r\n                                    .update(page);\r\n                        }\r\n                        getDataPublish(post);\r\n                    } catch (JSONException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n\r\n\r\n            }\r\n        });\r\n\r\n        Bundle bundle = new Bundle();\r\n        bundle.putString(\"fields\", \"gender, name, id, first_name, last_name, accounts\");\r\n        graphRequest.setParameters(bundle);\r\n        graphRequest.executeAsync();\r\n    }\r\n\r\n    private void postTwitter( Account account, PostedSchedule obj) {\r\n\r\n        String access_token = account.getAccess_token();\r\n        String access_secret = account.getAccess_secret();\r\n        ConfigurationBuilder cb = new twitter4j.conf.ConfigurationBuilder();\r\n        cb.setDebugEnabled(true);\r\n        cb.setOAuthConsumerKey(ctx.getString(R.string.twitter_CONSUMER_KEY));\r\n        cb.setOAuthConsumerSecret(ctx.getString(R.string.twitter_CONSUMER_SECRET));\r\n        twitter4j.auth.AccessToken twToken = new twitter4j.auth.AccessToken(access_token, access_secret);\r\n        TwitterFactory twitterFactory = new TwitterFactory(cb.build());\r\n        Twitter twitter = twitterFactory.getInstance();\r\n        twitter.setOAuthAccessToken(twToken);\r\n        Long mediaIds[] = new Long[5];\r\n\r\n        String desc = obj.getDescription() + \"\\n\\n\";\r\n\r\n        for(String hash : obj.getHashtags()){\r\n            desc += hash + \" \";\r\n        }\r\n\r\n        StatusUpdate statusUpdate = new StatusUpdate(desc);\r\n        File files[] = new File[5];\r\n        for (int i = 0; i < obj.getImage().size(); i++) {\r\n            String path = obj.getImage().get(i);\r\n            int finalI = i;\r\n            Picasso.get().load(path).into(new Target() {\r\n                @Override\r\n                public void onBitmapLoaded(Bitmap bitmap, Picasso.LoadedFrom from) {\r\n                    File file = new File(ctx.getCacheDir(), \"temp.jpg\");\r\n                    try {\r\n                        OutputStream os = new BufferedOutputStream(new FileOutputStream(file));\r\n                        bitmap.compress(Bitmap.CompressFormat.JPEG, 100, os);\r\n\r\n                        if(file.exists())Log.d(\"File\",\"EXISTS\");\r\n                        else Log.d(\"File\",\"NOT EXISTS\");\r\n                        files[finalI] = file;\r\n\r\n//                                os.close();\r\n                        if (finalI == obj.getImage().size() - 1) {\r\n                            Thread thread = new Thread(new Runnable() {\r\n                                @Override\r\n                                public void run() {\r\n                                    Status status = null;\r\n                                    try {\r\n                                        for(int i=0;i<obj.getImage().size();i++){\r\n                                            Log.d(\"I\",\"i ke \"+i);\r\n                                            File file = files[i];\r\n                                            UploadedMedia upload = twitter.uploadMedia(file);\r\n                                            mediaIds[i] = upload.getMediaId();\r\n                                            statusUpdate.setMediaIds(upload.getMediaId());\r\n                                            Log.d(\"I\",\"i ke \"+i+ \" End\");\r\n                                        }\r\n                                        status = twitter.updateStatus(statusUpdate);\r\n                                    } catch (TwitterException e) {\r\n                                        e.printStackTrace();\r\n                                    }\r\n\r\n\r\n\r\n                                }\r\n                            });\r\n                            thread.start();\r\n                        }\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n\r\n\r\n                }\r\n\r\n                @Override\r\n                public void onBitmapFailed(Exception e, Drawable errorDrawable) {\r\n\r\n                }\r\n\r\n                @Override\r\n                public void onPrepareLoad(Drawable placeHolderDrawable) {\r\n\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private boolean isTwitterExists(PostedSchedule post){\r\n        for(Account acc : post.getSelected_id())if(acc.getType().equals(\"twitter\"))return true;\r\n        return false;\r\n    }\r\n\r\n    private boolean isFacebookPagesExists(PostedSchedule post, String pid){\r\n        for(Account acc : post.getSelected_id()){\r\n            if(acc.getType().equals(\"facebook\") && acc.getPid().equalsIgnoreCase(pid)) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private boolean isInstagramExists(PostedSchedule post){\r\n        for(Account acc : post.getSelected_id())if(acc.getType().equals(\"instagram\"))return true;\r\n        return false;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/binuspostscheduler/notification/NotificationBroadcast.java b/app/src/main/java/com/example/binuspostscheduler/notification/NotificationBroadcast.java
--- a/app/src/main/java/com/example/binuspostscheduler/notification/NotificationBroadcast.java	(revision 9f18e886a45ffc7db4b339c4cf5048b76deedbd0)
+++ b/app/src/main/java/com/example/binuspostscheduler/notification/NotificationBroadcast.java	(date 1643163461112)
@@ -66,6 +66,7 @@
     FirebaseFirestore db = FirebaseFirestore.getInstance();
     String instagramBId = "";
     Context ctx;
+    
     @Override
     public void onReceive(Context context, Intent intent) {
         user_id = FirebaseAuth.getInstance().getCurrentUser().getUid();
@@ -87,8 +88,6 @@
                         postedListRaw.add(postedSchedule);
                     }
 
-
-
                     for(PostedSchedule post : postedListRaw){
                         Log.d("Notiflewat", user_id + " = " + post.getUser_id());
                         if(post.getUser_id().equalsIgnoreCase(user_id)){
@@ -128,7 +127,6 @@
                 }
             }
         });
-
     }
 
     void setDaily(PostedSchedule post , Context context){
